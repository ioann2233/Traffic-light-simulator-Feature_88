import os
import re
import telebot
import sqlite3
import requests
import subprocess
import speech_recognition as sr
from pydub import AudioSegment



# Создание базы данных
def create_database():
    conn = sqlite3.connect('user_requests.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        request_text TEXT,
        request_type TEXT,
        location TEXT,
        incident_type TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()
create_database()

# Функции
def log_request(chat_id, request_text, request_type, location, incident_type):
    conn = sqlite3.connect('user_requests.db')
    cursor = conn.cursor()
    cursor.execute(
        '''INSERT INTO user_requests (chat_id, request_text, request_type, location, incident_type)
           VALUES (?, ?, ?, ?, ?)''',
        (chat_id, request_text, request_type, location, incident_type)
    )
    conn.commit()
    conn.close()

def extract_location(text):
    match = re.search(r'\b(?:улица|ул\.|ул|улице)\s+([А-ЯЁа-яё\s]+)', text, re.IGNORECASE)
    return match.group(0) if match else None

def determine_incident_type(text):
    incident_keywords = {
        'ДТП': ['авария', 'столкновение', 'ДТП'],
        'ЗАТОР': ['пробка', 'затор', 'трафик'],
        'ДОРОЖНЫЕ РАБОТЫ': ['ремонт', 'дорожные работы', 'строительство'],
        'ДРУГОЕ': []
    }
    for incident, keywords in incident_keywords.items():
        if any(keyword.lower() in text.lower() for keyword in keywords):
            return incident
    return 'ДРУГОЕ'

# Обработчики
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(
        message.chat.id,
        "Привет! Пожалуйста, отправьте сообщение в следующем формате:\n"
        "- Местоположение: укажите улицу (например, 'улица Ленина')\n"
        "- Тип инцидента: выберите из следующих вариантов: ДТП, ЗАТОР, ДОРОЖНЫЕ РАБОТЫ, ДРУГОЕ\n\n"
        "Пример: 'На улице Ленина произошла авария, образовался затор.'"
    )

@bot.message_handler(func=lambda message: message.text and not message.text.startswith('/'))
def handle_text(message):
    request_text = message.text.strip()
    chat_id = message.chat.id
    location = extract_location(request_text)
    incident_type = determine_incident_type(request_text)

    if location and incident_type != 'ДРУГОЕ':
        log_request(chat_id, request_text, "text", location, incident_type)
        bot.send_message(chat_id, f"Ваш запрос был записан:\nМестоположение: {location}\nТип инцидента: {incident_type}")
    else:
        bot.send_message(
            chat_id,
            "Не удалось определить местоположение или тип инцидента. Пожалуйста, следуйте следующему формату:\n"
            "- Местоположение: укажите улицу (например, 'улица Ленина')\n"
            "- Тип инцидента: выберите из следующих вариантов: ДТП, ЗАТОР, ДОРОЖНЫЕ РАБОТЫ, ДРУГОЕ\n\n"
            "Пример: 'На улице Ленина произошла авария, образовался затор.'"
        )

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    chat_id = message.chat.id
    file_info = bot.get_file(message.voice.file_id)
    file_path = file_info.file_path
    file_url = f'https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}'

    # Скачивание голосового сообщения
    response = requests.get(file_url)
    if response.status_code == 200:
        with open('voice.ogg', 'wb') as f:
            f.write(response.content)

        # Конвертация OGG в WAV
        AudioSegment.from_ogg('voice.ogg').export('voice.wav', format='wav')

        # Распознавание речи
        recognizer = sr.Recognizer()
        with sr.AudioFile('voice.wav') as source:
            audio = recognizer.record(source)
            try:
                recognized_text = recognizer.recognize_google(audio, language='ru-RU')
                location = extract_location(recognized_text)
                incident_type = determine_incident_type(recognized_text)

                if location and incident_type != 'ДРУГОЕ':
                    log_request(chat_id, recognized_text, "voice", location, incident_type)
                    bot.send_message(chat_id, f"Благодарим Вас. Ваш голосовой запрос был записан:\nМестоположение: {location}\nТип инцидента: {incident_type}. Мы уже передали его нашему сотруднику")
                else:
                    bot.send_message(
                        chat_id,
                        "Не удалось определить местоположение или тип инцидента из голосового сообщения. Отправьте текстовое сообщение."
                    )
            except sr.UnknownValueError:
                bot.send_message(chat_id, "Не удалось распознать голосовое сообщение.")
            except sr.RequestError as e:
                bot.send_message(chat_id, f"Ошибка распознавания: {e}")

        # Удаление временных файлов
        os.remove('voice.ogg')
        os.remove('voice.wav')